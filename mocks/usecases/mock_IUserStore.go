// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package usecases

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"github.com/tuantran1810/go-di-template/internal/entities"
)

// NewMockIUserStore creates a new instance of MockIUserStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIUserStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIUserStore {
	mock := &MockIUserStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockIUserStore is an autogenerated mock type for the IUserStore type
type MockIUserStore struct {
	mock.Mock
}

type MockIUserStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIUserStore) EXPECT() *MockIUserStore_Expecter {
	return &MockIUserStore_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockIUserStore
func (_mock *MockIUserStore) Create(ctx context.Context, tx entities.Transaction, user *entities.User) (*entities.User, error) {
	ret := _mock.Called(ctx, tx, user)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *entities.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, entities.Transaction, *entities.User) (*entities.User, error)); ok {
		return returnFunc(ctx, tx, user)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, entities.Transaction, *entities.User) *entities.User); ok {
		r0 = returnFunc(ctx, tx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, entities.Transaction, *entities.User) error); ok {
		r1 = returnFunc(ctx, tx, user)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIUserStore_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockIUserStore_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx
//   - tx
//   - user
func (_e *MockIUserStore_Expecter) Create(ctx interface{}, tx interface{}, user interface{}) *MockIUserStore_Create_Call {
	return &MockIUserStore_Create_Call{Call: _e.mock.On("Create", ctx, tx, user)}
}

func (_c *MockIUserStore_Create_Call) Run(run func(ctx context.Context, tx entities.Transaction, user *entities.User)) *MockIUserStore_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entities.Transaction), args[2].(*entities.User))
	})
	return _c
}

func (_c *MockIUserStore_Create_Call) Return(user1 *entities.User, err error) *MockIUserStore_Create_Call {
	_c.Call.Return(user1, err)
	return _c
}

func (_c *MockIUserStore_Create_Call) RunAndReturn(run func(ctx context.Context, tx entities.Transaction, user *entities.User) (*entities.User, error)) *MockIUserStore_Create_Call {
	_c.Call.Return(run)
	return _c
}
