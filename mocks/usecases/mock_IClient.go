// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package usecases

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"github.com/tuantran1810/go-di-template/internal/entities"
)

// NewMockIClient creates a new instance of MockIClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIClient {
	mock := &MockIClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockIClient is an autogenerated mock type for the IClient type
type MockIClient struct {
	mock.Mock
}

type MockIClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIClient) EXPECT() *MockIClient_Expecter {
	return &MockIClient_Expecter{mock: &_m.Mock}
}

// Send provides a mock function for the type MockIClient
func (_mock *MockIClient) Send(ctx context.Context, msg *entities.Message) error {
	ret := _mock.Called(ctx, msg)

	if len(ret) == 0 {
		panic("no return value specified for Send")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *entities.Message) error); ok {
		r0 = returnFunc(ctx, msg)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockIClient_Send_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Send'
type MockIClient_Send_Call struct {
	*mock.Call
}

// Send is a helper method to define mock.On call
//   - ctx
//   - msg
func (_e *MockIClient_Expecter) Send(ctx interface{}, msg interface{}) *MockIClient_Send_Call {
	return &MockIClient_Send_Call{Call: _e.mock.On("Send", ctx, msg)}
}

func (_c *MockIClient_Send_Call) Run(run func(ctx context.Context, msg *entities.Message)) *MockIClient_Send_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entities.Message))
	})
	return _c
}

func (_c *MockIClient_Send_Call) Return(err error) *MockIClient_Send_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIClient_Send_Call) RunAndReturn(run func(ctx context.Context, msg *entities.Message) error) *MockIClient_Send_Call {
	_c.Call.Return(run)
	return _c
}
