// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package usecases

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"github.com/tuantran1810/go-di-template/internal/entities"
)

// NewMockIInventoryRepository creates a new instance of MockIInventoryRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIInventoryRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIInventoryRepository {
	mock := &MockIInventoryRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockIInventoryRepository is an autogenerated mock type for the IInventoryRepository type
type MockIInventoryRepository struct {
	mock.Mock
}

type MockIInventoryRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIInventoryRepository) EXPECT() *MockIInventoryRepository_Expecter {
	return &MockIInventoryRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockIInventoryRepository
func (_mock *MockIInventoryRepository) Create(ctx context.Context, tx entities.Transaction, inventory *entities.Inventory) (*entities.Inventory, error) {
	ret := _mock.Called(ctx, tx, inventory)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *entities.Inventory
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, entities.Transaction, *entities.Inventory) (*entities.Inventory, error)); ok {
		return returnFunc(ctx, tx, inventory)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, entities.Transaction, *entities.Inventory) *entities.Inventory); ok {
		r0 = returnFunc(ctx, tx, inventory)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Inventory)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, entities.Transaction, *entities.Inventory) error); ok {
		r1 = returnFunc(ctx, tx, inventory)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIInventoryRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockIInventoryRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx
//   - tx
//   - inventory
func (_e *MockIInventoryRepository_Expecter) Create(ctx interface{}, tx interface{}, inventory interface{}) *MockIInventoryRepository_Create_Call {
	return &MockIInventoryRepository_Create_Call{Call: _e.mock.On("Create", ctx, tx, inventory)}
}

func (_c *MockIInventoryRepository_Create_Call) Run(run func(ctx context.Context, tx entities.Transaction, inventory *entities.Inventory)) *MockIInventoryRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entities.Transaction), args[2].(*entities.Inventory))
	})
	return _c
}

func (_c *MockIInventoryRepository_Create_Call) Return(inventory1 *entities.Inventory, err error) *MockIInventoryRepository_Create_Call {
	_c.Call.Return(inventory1, err)
	return _c
}

func (_c *MockIInventoryRepository_Create_Call) RunAndReturn(run func(ctx context.Context, tx entities.Transaction, inventory *entities.Inventory) (*entities.Inventory, error)) *MockIInventoryRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockIInventoryRepository
func (_mock *MockIInventoryRepository) Delete(ctx context.Context, tx entities.Transaction, id uint) error {
	ret := _mock.Called(ctx, tx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, entities.Transaction, uint) error); ok {
		r0 = returnFunc(ctx, tx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockIInventoryRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockIInventoryRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx
//   - tx
//   - id
func (_e *MockIInventoryRepository_Expecter) Delete(ctx interface{}, tx interface{}, id interface{}) *MockIInventoryRepository_Delete_Call {
	return &MockIInventoryRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, tx, id)}
}

func (_c *MockIInventoryRepository_Delete_Call) Run(run func(ctx context.Context, tx entities.Transaction, id uint)) *MockIInventoryRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entities.Transaction), args[2].(uint))
	})
	return _c
}

func (_c *MockIInventoryRepository_Delete_Call) Return(err error) *MockIInventoryRepository_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIInventoryRepository_Delete_Call) RunAndReturn(run func(ctx context.Context, tx entities.Transaction, id uint) error) *MockIInventoryRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// FindByItemName provides a mock function for the type MockIInventoryRepository
func (_mock *MockIInventoryRepository) FindByItemName(ctx context.Context, tx entities.Transaction, itemName string) ([]*entities.Inventory, error) {
	ret := _mock.Called(ctx, tx, itemName)

	if len(ret) == 0 {
		panic("no return value specified for FindByItemName")
	}

	var r0 []*entities.Inventory
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, entities.Transaction, string) ([]*entities.Inventory, error)); ok {
		return returnFunc(ctx, tx, itemName)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, entities.Transaction, string) []*entities.Inventory); ok {
		r0 = returnFunc(ctx, tx, itemName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Inventory)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, entities.Transaction, string) error); ok {
		r1 = returnFunc(ctx, tx, itemName)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIInventoryRepository_FindByItemName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByItemName'
type MockIInventoryRepository_FindByItemName_Call struct {
	*mock.Call
}

// FindByItemName is a helper method to define mock.On call
//   - ctx
//   - tx
//   - itemName
func (_e *MockIInventoryRepository_Expecter) FindByItemName(ctx interface{}, tx interface{}, itemName interface{}) *MockIInventoryRepository_FindByItemName_Call {
	return &MockIInventoryRepository_FindByItemName_Call{Call: _e.mock.On("FindByItemName", ctx, tx, itemName)}
}

func (_c *MockIInventoryRepository_FindByItemName_Call) Run(run func(ctx context.Context, tx entities.Transaction, itemName string)) *MockIInventoryRepository_FindByItemName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entities.Transaction), args[2].(string))
	})
	return _c
}

func (_c *MockIInventoryRepository_FindByItemName_Call) Return(inventorys []*entities.Inventory, err error) *MockIInventoryRepository_FindByItemName_Call {
	_c.Call.Return(inventorys, err)
	return _c
}

func (_c *MockIInventoryRepository_FindByItemName_Call) RunAndReturn(run func(ctx context.Context, tx entities.Transaction, itemName string) ([]*entities.Inventory, error)) *MockIInventoryRepository_FindByItemName_Call {
	_c.Call.Return(run)
	return _c
}

// FindByUserID provides a mock function for the type MockIInventoryRepository
func (_mock *MockIInventoryRepository) FindByUserID(ctx context.Context, tx entities.Transaction, userID uint) ([]*entities.Inventory, error) {
	ret := _mock.Called(ctx, tx, userID)

	if len(ret) == 0 {
		panic("no return value specified for FindByUserID")
	}

	var r0 []*entities.Inventory
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, entities.Transaction, uint) ([]*entities.Inventory, error)); ok {
		return returnFunc(ctx, tx, userID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, entities.Transaction, uint) []*entities.Inventory); ok {
		r0 = returnFunc(ctx, tx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Inventory)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, entities.Transaction, uint) error); ok {
		r1 = returnFunc(ctx, tx, userID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIInventoryRepository_FindByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByUserID'
type MockIInventoryRepository_FindByUserID_Call struct {
	*mock.Call
}

// FindByUserID is a helper method to define mock.On call
//   - ctx
//   - tx
//   - userID
func (_e *MockIInventoryRepository_Expecter) FindByUserID(ctx interface{}, tx interface{}, userID interface{}) *MockIInventoryRepository_FindByUserID_Call {
	return &MockIInventoryRepository_FindByUserID_Call{Call: _e.mock.On("FindByUserID", ctx, tx, userID)}
}

func (_c *MockIInventoryRepository_FindByUserID_Call) Run(run func(ctx context.Context, tx entities.Transaction, userID uint)) *MockIInventoryRepository_FindByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entities.Transaction), args[2].(uint))
	})
	return _c
}

func (_c *MockIInventoryRepository_FindByUserID_Call) Return(inventorys []*entities.Inventory, err error) *MockIInventoryRepository_FindByUserID_Call {
	_c.Call.Return(inventorys, err)
	return _c
}

func (_c *MockIInventoryRepository_FindByUserID_Call) RunAndReturn(run func(ctx context.Context, tx entities.Transaction, userID uint) ([]*entities.Inventory, error)) *MockIInventoryRepository_FindByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockIInventoryRepository
func (_mock *MockIInventoryRepository) Get(ctx context.Context, tx entities.Transaction, id uint) (*entities.Inventory, error) {
	ret := _mock.Called(ctx, tx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *entities.Inventory
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, entities.Transaction, uint) (*entities.Inventory, error)); ok {
		return returnFunc(ctx, tx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, entities.Transaction, uint) *entities.Inventory); ok {
		r0 = returnFunc(ctx, tx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Inventory)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, entities.Transaction, uint) error); ok {
		r1 = returnFunc(ctx, tx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIInventoryRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockIInventoryRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx
//   - tx
//   - id
func (_e *MockIInventoryRepository_Expecter) Get(ctx interface{}, tx interface{}, id interface{}) *MockIInventoryRepository_Get_Call {
	return &MockIInventoryRepository_Get_Call{Call: _e.mock.On("Get", ctx, tx, id)}
}

func (_c *MockIInventoryRepository_Get_Call) Run(run func(ctx context.Context, tx entities.Transaction, id uint)) *MockIInventoryRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entities.Transaction), args[2].(uint))
	})
	return _c
}

func (_c *MockIInventoryRepository_Get_Call) Return(inventory *entities.Inventory, err error) *MockIInventoryRepository_Get_Call {
	_c.Call.Return(inventory, err)
	return _c
}

func (_c *MockIInventoryRepository_Get_Call) RunAndReturn(run func(ctx context.Context, tx entities.Transaction, id uint) (*entities.Inventory, error)) *MockIInventoryRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockIInventoryRepository
func (_mock *MockIInventoryRepository) Update(ctx context.Context, tx entities.Transaction, inventory *entities.Inventory) (*entities.Inventory, error) {
	ret := _mock.Called(ctx, tx, inventory)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *entities.Inventory
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, entities.Transaction, *entities.Inventory) (*entities.Inventory, error)); ok {
		return returnFunc(ctx, tx, inventory)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, entities.Transaction, *entities.Inventory) *entities.Inventory); ok {
		r0 = returnFunc(ctx, tx, inventory)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Inventory)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, entities.Transaction, *entities.Inventory) error); ok {
		r1 = returnFunc(ctx, tx, inventory)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIInventoryRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockIInventoryRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx
//   - tx
//   - inventory
func (_e *MockIInventoryRepository_Expecter) Update(ctx interface{}, tx interface{}, inventory interface{}) *MockIInventoryRepository_Update_Call {
	return &MockIInventoryRepository_Update_Call{Call: _e.mock.On("Update", ctx, tx, inventory)}
}

func (_c *MockIInventoryRepository_Update_Call) Run(run func(ctx context.Context, tx entities.Transaction, inventory *entities.Inventory)) *MockIInventoryRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entities.Transaction), args[2].(*entities.Inventory))
	})
	return _c
}

func (_c *MockIInventoryRepository_Update_Call) Return(inventory1 *entities.Inventory, err error) *MockIInventoryRepository_Update_Call {
	_c.Call.Return(inventory1, err)
	return _c
}

func (_c *MockIInventoryRepository_Update_Call) RunAndReturn(run func(ctx context.Context, tx entities.Transaction, inventory *entities.Inventory) (*entities.Inventory, error)) *MockIInventoryRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}
