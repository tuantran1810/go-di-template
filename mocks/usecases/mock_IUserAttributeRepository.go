// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package usecases

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"github.com/tuantran1810/go-di-template/internal/entities"
)

// NewMockIUserAttributeRepository creates a new instance of MockIUserAttributeRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIUserAttributeRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIUserAttributeRepository {
	mock := &MockIUserAttributeRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockIUserAttributeRepository is an autogenerated mock type for the IUserAttributeRepository type
type MockIUserAttributeRepository struct {
	mock.Mock
}

type MockIUserAttributeRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIUserAttributeRepository) EXPECT() *MockIUserAttributeRepository_Expecter {
	return &MockIUserAttributeRepository_Expecter{mock: &_m.Mock}
}

// CreateMany provides a mock function for the type MockIUserAttributeRepository
func (_mock *MockIUserAttributeRepository) CreateMany(ctx context.Context, tx entities.Transaction, userAttributes []entities.UserAttribute) ([]entities.UserAttribute, error) {
	ret := _mock.Called(ctx, tx, userAttributes)

	if len(ret) == 0 {
		panic("no return value specified for CreateMany")
	}

	var r0 []entities.UserAttribute
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, entities.Transaction, []entities.UserAttribute) ([]entities.UserAttribute, error)); ok {
		return returnFunc(ctx, tx, userAttributes)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, entities.Transaction, []entities.UserAttribute) []entities.UserAttribute); ok {
		r0 = returnFunc(ctx, tx, userAttributes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.UserAttribute)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, entities.Transaction, []entities.UserAttribute) error); ok {
		r1 = returnFunc(ctx, tx, userAttributes)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIUserAttributeRepository_CreateMany_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateMany'
type MockIUserAttributeRepository_CreateMany_Call struct {
	*mock.Call
}

// CreateMany is a helper method to define mock.On call
//   - ctx
//   - tx
//   - userAttributes
func (_e *MockIUserAttributeRepository_Expecter) CreateMany(ctx interface{}, tx interface{}, userAttributes interface{}) *MockIUserAttributeRepository_CreateMany_Call {
	return &MockIUserAttributeRepository_CreateMany_Call{Call: _e.mock.On("CreateMany", ctx, tx, userAttributes)}
}

func (_c *MockIUserAttributeRepository_CreateMany_Call) Run(run func(ctx context.Context, tx entities.Transaction, userAttributes []entities.UserAttribute)) *MockIUserAttributeRepository_CreateMany_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entities.Transaction), args[2].([]entities.UserAttribute))
	})
	return _c
}

func (_c *MockIUserAttributeRepository_CreateMany_Call) Return(userAttributes1 []entities.UserAttribute, err error) *MockIUserAttributeRepository_CreateMany_Call {
	_c.Call.Return(userAttributes1, err)
	return _c
}

func (_c *MockIUserAttributeRepository_CreateMany_Call) RunAndReturn(run func(ctx context.Context, tx entities.Transaction, userAttributes []entities.UserAttribute) ([]entities.UserAttribute, error)) *MockIUserAttributeRepository_CreateMany_Call {
	_c.Call.Return(run)
	return _c
}

// GetByUserID provides a mock function for the type MockIUserAttributeRepository
func (_mock *MockIUserAttributeRepository) GetByUserID(ctx context.Context, tx entities.Transaction, userID uint) ([]entities.UserAttribute, error) {
	ret := _mock.Called(ctx, tx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetByUserID")
	}

	var r0 []entities.UserAttribute
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, entities.Transaction, uint) ([]entities.UserAttribute, error)); ok {
		return returnFunc(ctx, tx, userID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, entities.Transaction, uint) []entities.UserAttribute); ok {
		r0 = returnFunc(ctx, tx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.UserAttribute)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, entities.Transaction, uint) error); ok {
		r1 = returnFunc(ctx, tx, userID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIUserAttributeRepository_GetByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByUserID'
type MockIUserAttributeRepository_GetByUserID_Call struct {
	*mock.Call
}

// GetByUserID is a helper method to define mock.On call
//   - ctx
//   - tx
//   - userID
func (_e *MockIUserAttributeRepository_Expecter) GetByUserID(ctx interface{}, tx interface{}, userID interface{}) *MockIUserAttributeRepository_GetByUserID_Call {
	return &MockIUserAttributeRepository_GetByUserID_Call{Call: _e.mock.On("GetByUserID", ctx, tx, userID)}
}

func (_c *MockIUserAttributeRepository_GetByUserID_Call) Run(run func(ctx context.Context, tx entities.Transaction, userID uint)) *MockIUserAttributeRepository_GetByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entities.Transaction), args[2].(uint))
	})
	return _c
}

func (_c *MockIUserAttributeRepository_GetByUserID_Call) Return(userAttributes []entities.UserAttribute, err error) *MockIUserAttributeRepository_GetByUserID_Call {
	_c.Call.Return(userAttributes, err)
	return _c
}

func (_c *MockIUserAttributeRepository_GetByUserID_Call) RunAndReturn(run func(ctx context.Context, tx entities.Transaction, userID uint) ([]entities.UserAttribute, error)) *MockIUserAttributeRepository_GetByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// GetManyByUserName provides a mock function for the type MockIUserAttributeRepository
func (_mock *MockIUserAttributeRepository) GetManyByUserName(ctx context.Context, tx entities.Transaction, userName string) ([]entities.UserAttribute, error) {
	ret := _mock.Called(ctx, tx, userName)

	if len(ret) == 0 {
		panic("no return value specified for GetManyByUserName")
	}

	var r0 []entities.UserAttribute
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, entities.Transaction, string) ([]entities.UserAttribute, error)); ok {
		return returnFunc(ctx, tx, userName)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, entities.Transaction, string) []entities.UserAttribute); ok {
		r0 = returnFunc(ctx, tx, userName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.UserAttribute)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, entities.Transaction, string) error); ok {
		r1 = returnFunc(ctx, tx, userName)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIUserAttributeRepository_GetManyByUserName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetManyByUserName'
type MockIUserAttributeRepository_GetManyByUserName_Call struct {
	*mock.Call
}

// GetManyByUserName is a helper method to define mock.On call
//   - ctx
//   - tx
//   - userName
func (_e *MockIUserAttributeRepository_Expecter) GetManyByUserName(ctx interface{}, tx interface{}, userName interface{}) *MockIUserAttributeRepository_GetManyByUserName_Call {
	return &MockIUserAttributeRepository_GetManyByUserName_Call{Call: _e.mock.On("GetManyByUserName", ctx, tx, userName)}
}

func (_c *MockIUserAttributeRepository_GetManyByUserName_Call) Run(run func(ctx context.Context, tx entities.Transaction, userName string)) *MockIUserAttributeRepository_GetManyByUserName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entities.Transaction), args[2].(string))
	})
	return _c
}

func (_c *MockIUserAttributeRepository_GetManyByUserName_Call) Return(userAttributes []entities.UserAttribute, err error) *MockIUserAttributeRepository_GetManyByUserName_Call {
	_c.Call.Return(userAttributes, err)
	return _c
}

func (_c *MockIUserAttributeRepository_GetManyByUserName_Call) RunAndReturn(run func(ctx context.Context, tx entities.Transaction, userName string) ([]entities.UserAttribute, error)) *MockIUserAttributeRepository_GetManyByUserName_Call {
	_c.Call.Return(run)
	return _c
}
