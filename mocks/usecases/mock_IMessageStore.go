// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package usecases

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"github.com/tuantran1810/go-di-template/internal/entities"
)

// NewMockIMessageStore creates a new instance of MockIMessageStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIMessageStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIMessageStore {
	mock := &MockIMessageStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockIMessageStore is an autogenerated mock type for the IMessageStore type
type MockIMessageStore struct {
	mock.Mock
}

type MockIMessageStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIMessageStore) EXPECT() *MockIMessageStore_Expecter {
	return &MockIMessageStore_Expecter{mock: &_m.Mock}
}

// CreateMany provides a mock function for the type MockIMessageStore
func (_mock *MockIMessageStore) CreateMany(ctx context.Context, tx entities.Transaction, messages []entities.Message) ([]entities.Message, error) {
	ret := _mock.Called(ctx, tx, messages)

	if len(ret) == 0 {
		panic("no return value specified for CreateMany")
	}

	var r0 []entities.Message
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, entities.Transaction, []entities.Message) ([]entities.Message, error)); ok {
		return returnFunc(ctx, tx, messages)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, entities.Transaction, []entities.Message) []entities.Message); ok {
		r0 = returnFunc(ctx, tx, messages)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Message)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, entities.Transaction, []entities.Message) error); ok {
		r1 = returnFunc(ctx, tx, messages)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIMessageStore_CreateMany_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateMany'
type MockIMessageStore_CreateMany_Call struct {
	*mock.Call
}

// CreateMany is a helper method to define mock.On call
//   - ctx
//   - tx
//   - messages
func (_e *MockIMessageStore_Expecter) CreateMany(ctx interface{}, tx interface{}, messages interface{}) *MockIMessageStore_CreateMany_Call {
	return &MockIMessageStore_CreateMany_Call{Call: _e.mock.On("CreateMany", ctx, tx, messages)}
}

func (_c *MockIMessageStore_CreateMany_Call) Run(run func(ctx context.Context, tx entities.Transaction, messages []entities.Message)) *MockIMessageStore_CreateMany_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entities.Transaction), args[2].([]entities.Message))
	})
	return _c
}

func (_c *MockIMessageStore_CreateMany_Call) Return(messages1 []entities.Message, err error) *MockIMessageStore_CreateMany_Call {
	_c.Call.Return(messages1, err)
	return _c
}

func (_c *MockIMessageStore_CreateMany_Call) RunAndReturn(run func(ctx context.Context, tx entities.Transaction, messages []entities.Message) ([]entities.Message, error)) *MockIMessageStore_CreateMany_Call {
	_c.Call.Return(run)
	return _c
}
