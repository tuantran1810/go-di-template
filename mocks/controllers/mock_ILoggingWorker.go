// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package controllers

import (
	mock "github.com/stretchr/testify/mock"
	"github.com/tuantran1810/go-di-template/internal/entities"
)

// NewMockILoggingWorker creates a new instance of MockILoggingWorker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockILoggingWorker(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockILoggingWorker {
	mock := &MockILoggingWorker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockILoggingWorker is an autogenerated mock type for the ILoggingWorker type
type MockILoggingWorker struct {
	mock.Mock
}

type MockILoggingWorker_Expecter struct {
	mock *mock.Mock
}

func (_m *MockILoggingWorker) EXPECT() *MockILoggingWorker_Expecter {
	return &MockILoggingWorker_Expecter{mock: &_m.Mock}
}

// Inject provides a mock function for the type MockILoggingWorker
func (_mock *MockILoggingWorker) Inject(msg entities.Message) {
	_mock.Called(msg)
	return
}

// MockILoggingWorker_Inject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Inject'
type MockILoggingWorker_Inject_Call struct {
	*mock.Call
}

// Inject is a helper method to define mock.On call
//   - msg
func (_e *MockILoggingWorker_Expecter) Inject(msg interface{}) *MockILoggingWorker_Inject_Call {
	return &MockILoggingWorker_Inject_Call{Call: _e.mock.On("Inject", msg)}
}

func (_c *MockILoggingWorker_Inject_Call) Run(run func(msg entities.Message)) *MockILoggingWorker_Inject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(entities.Message))
	})
	return _c
}

func (_c *MockILoggingWorker_Inject_Call) Return() *MockILoggingWorker_Inject_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockILoggingWorker_Inject_Call) RunAndReturn(run func(msg entities.Message)) *MockILoggingWorker_Inject_Call {
	_c.Run(run)
	return _c
}
