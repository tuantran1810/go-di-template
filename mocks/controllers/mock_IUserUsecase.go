// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package controllers

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"github.com/tuantran1810/go-di-template/internal/entities"
)

// NewMockIUserUsecase creates a new instance of MockIUserUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIUserUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIUserUsecase {
	mock := &MockIUserUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockIUserUsecase is an autogenerated mock type for the IUserUsecase type
type MockIUserUsecase struct {
	mock.Mock
}

type MockIUserUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIUserUsecase) EXPECT() *MockIUserUsecase_Expecter {
	return &MockIUserUsecase_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function for the type MockIUserUsecase
func (_mock *MockIUserUsecase) CreateUser(ctx context.Context, user *entities.User, attributes []entities.KeyValuePair) (*entities.User, []entities.UserAttribute, error) {
	ret := _mock.Called(ctx, user, attributes)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 *entities.User
	var r1 []entities.UserAttribute
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *entities.User, []entities.KeyValuePair) (*entities.User, []entities.UserAttribute, error)); ok {
		return returnFunc(ctx, user, attributes)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *entities.User, []entities.KeyValuePair) *entities.User); ok {
		r0 = returnFunc(ctx, user, attributes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *entities.User, []entities.KeyValuePair) []entities.UserAttribute); ok {
		r1 = returnFunc(ctx, user, attributes)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]entities.UserAttribute)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, *entities.User, []entities.KeyValuePair) error); ok {
		r2 = returnFunc(ctx, user, attributes)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockIUserUsecase_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MockIUserUsecase_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx
//   - user
//   - attributes
func (_e *MockIUserUsecase_Expecter) CreateUser(ctx interface{}, user interface{}, attributes interface{}) *MockIUserUsecase_CreateUser_Call {
	return &MockIUserUsecase_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, user, attributes)}
}

func (_c *MockIUserUsecase_CreateUser_Call) Run(run func(ctx context.Context, user *entities.User, attributes []entities.KeyValuePair)) *MockIUserUsecase_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entities.User), args[2].([]entities.KeyValuePair))
	})
	return _c
}

func (_c *MockIUserUsecase_CreateUser_Call) Return(user1 *entities.User, userAttributes []entities.UserAttribute, err error) *MockIUserUsecase_CreateUser_Call {
	_c.Call.Return(user1, userAttributes, err)
	return _c
}

func (_c *MockIUserUsecase_CreateUser_Call) RunAndReturn(run func(ctx context.Context, user *entities.User, attributes []entities.KeyValuePair) (*entities.User, []entities.UserAttribute, error)) *MockIUserUsecase_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByUsername provides a mock function for the type MockIUserUsecase
func (_mock *MockIUserUsecase) GetUserByUsername(ctx context.Context, username string) (*entities.User, []entities.UserAttribute, error) {
	ret := _mock.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByUsername")
	}

	var r0 *entities.User
	var r1 []entities.UserAttribute
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*entities.User, []entities.UserAttribute, error)); ok {
		return returnFunc(ctx, username)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *entities.User); ok {
		r0 = returnFunc(ctx, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) []entities.UserAttribute); ok {
		r1 = returnFunc(ctx, username)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]entities.UserAttribute)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = returnFunc(ctx, username)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockIUserUsecase_GetUserByUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByUsername'
type MockIUserUsecase_GetUserByUsername_Call struct {
	*mock.Call
}

// GetUserByUsername is a helper method to define mock.On call
//   - ctx
//   - username
func (_e *MockIUserUsecase_Expecter) GetUserByUsername(ctx interface{}, username interface{}) *MockIUserUsecase_GetUserByUsername_Call {
	return &MockIUserUsecase_GetUserByUsername_Call{Call: _e.mock.On("GetUserByUsername", ctx, username)}
}

func (_c *MockIUserUsecase_GetUserByUsername_Call) Run(run func(ctx context.Context, username string)) *MockIUserUsecase_GetUserByUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockIUserUsecase_GetUserByUsername_Call) Return(user *entities.User, userAttributes []entities.UserAttribute, err error) *MockIUserUsecase_GetUserByUsername_Call {
	_c.Call.Return(user, userAttributes, err)
	return _c
}

func (_c *MockIUserUsecase_GetUserByUsername_Call) RunAndReturn(run func(ctx context.Context, username string) (*entities.User, []entities.UserAttribute, error)) *MockIUserUsecase_GetUserByUsername_Call {
	_c.Call.Return(run)
	return _c
}
